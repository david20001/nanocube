#!/bin/bash

# options are "debug", "release", "profile", "security"
MODE="debug"
if [ $1 ]; then
	MODE=$1
fi

ARGS=("$@")
ARGS_LENGTH=${#ARGS[@]}

POYCOVER_SUPPPORT=false
CUSTOM_DEFINES=""
EXTRA=""
for (( i=1; i<$ARGS_LENGTH; i++ )); do
	CUSTOM_DEFINES+="-D${ARGS[$i]} ";
	EXTRA="$EXTRA ${ARGS[$i]}"
	if [ "${ARGS[$i]}" == "POLYCOVER" ]; then
		POLYCOVER_SUPPORT=true
	fi
done
# echo "${CUSTOM_DEFINES}"

#
# 2018-11-13T13:41
#      Included
#            -Wno-misleading-indentation
#            -Wno-implicit-fallthrough
#      to avoid compilation errors on gcc version 7.3.0 (Ubuntu 7.3.0-16ubuntu3)
#
# FLAGS=-std=c++11 -stdlib=libc++ -O3 -Wall -Werror -Weverything

CFLAGS=$(cat <(cat <<EOF
-Wall
-Werror
-std=c11
-Wno-unused-variable
-Wno-null-dereference
-Wno-unused-function
-DOS_MAC
EOF
) | paste -d' ' -s -)

CXXFLAGS=$(cat <(cat <<EOF
-std=c++11
-DOS_MAC
EOF
) | paste -d' ' -s -)

DEBUG_FLAGS="-g -ggdb -DCHECK_ASSERTIONS -fno-omit-frame-pointer"
RELEASE_FLAGS="-g -ggdb -O3"
PROFILE_FLAGS="-g -ggdb -O2 -fno-omit-frame-pointer -DPROFILE"
SECURITY_FLAGS="-g3 -gdwarf-2 -O0 -fno-builtin "
OPTIONS=""

# echo "${MODE}"
if [ "${MODE}" == "debug" ]; then
	OPTIONS="${DEBUG_FLAGS} ${CUSTOM_DEFINES}"
elif [ "${MODE}" == "release" ]; then
	OPTIONS="${RELEASE_FLAGS} ${CUSTOM_DEFINES}"
elif [ "${MODE}" == "profile" ]; then
	OPTIONS="${PROFILE_FLAGS} ${CUSTOM_DEFINES}"
elif [ "${MODE}" == "security" ]; then
	OPTIONS="${SECURITY_FLAGS} ${CUSTOM_DEFINES}"
else
	echo "invalide mode. needs to be 'debug', 'release', or 'profile'";
	exit;
fi

CFLAGS="$CFLAGS $OPTIONS"
CXXFLAGS="$CXXFLAGS $OPTIONS"

EXE="nc41"
BUILD="../../build/nc41"
SRC="../../nc41/src"
CC="clang"
CXX="clang++"
LIBS="-L${BUILD} -lm -lpthread"
APP_EXTRA_LIBS=""

if [ "$POLYCOVER_SUPPORT" = true ]; then

	POLYCOVER_SRC=$(cat <(cat <<'EOF'
polycover/area.cc
polycover/area.hh
polycover/boundary.cc
polycover/boundary.hh
polycover/cells.cc
polycover/cells.hh
polycover/geometry.cc
polycover/geometry.hh
polycover/glue.cc
polycover/infix_iterator.hh
polycover/labeled_tree.cc
polycover/labeled_tree.hh
polycover/maps.cc
polycover/maps.hh
polycover/mipmap.cc
polycover/mipmap.hh
polycover/polycover.cc
polycover/polycover.h
polycover/polycover.hh
polycover/signal.hh
polycover/tessellation.cc
polycover/tessellation.hh
polycover/tokenizer.cc
polycover/tokenizer.hh
polycover/glu/dict.c
polycover/glu/memalloc.c
polycover/glu/sweep.c
polycover/glu/tessmono.c
polycover/glu/geom.c
polycover/glu/mesh.c
polycover/glu/priorityq.c
polycover/glu/tess.c
polycover/glu/normal.c
polycover/glu/render.c
polycover/glu/tessellate.c
EOF
) | egrep -v "[.](hh|h)$" | paste -d' ' -s -)

	pushd $BUILD

	# f_cmd="tmp_cmd"
	# if [ -f $f_cmd ]; then rm $f_cmd; fi

	C_FILENAMES="$(echo $POLYCOVER_SRC | tr ' ' '\n' | grep "[.]c$" | paste -d' ' -s -)"
	# echo "C_FILENAMES: $C_FILENAMES"
	POLYCOVER_OBJ_FILES=""
	for C_FILENAME in $C_FILENAMES; do
		OBJ_FILENAME=$(echo $C_FILENAME | tr '/' '_' | sed 's/[.]c$/.o/')
		POLYCOVER_OBJ_FILES="$POLYCOVER_OBJ_FILES $OBJ_FILENAME"
		C_SRC="$SRC/$C_FILENAME"
		if [ ! -f $OBJ_FILENAME ] || [ $OBJ_FILENAME -ot $C_SRC ]; then
			echo "${CC} ${CFLAGS} -c $C_SRC -o $OBJ_FILENAME"
			${CC} ${CFLAGS} -c $C_SRC -o $OBJ_FILENAME
		fi
	done

	CXX_FILENAMES="$(echo $POLYCOVER_SRC | tr ' ' '\n' | grep "[.]cc$" | paste -d' ' -s -)"
	# echo "CXX_FILENAMES: $CXX_FILENAMES"
	for CXX_FILENAME in $CXX_FILENAMES; do
		OBJ_FILENAME=$(echo $CXX_FILENAME | tr '/' '_' | sed 's/[.]cc$/.o/')
		POLYCOVER_OBJ_FILES="$POLYCOVER_OBJ_FILES $OBJ_FILENAME"
		CXX_SRC="$SRC/$CXX_FILENAME"
		if [ ! -f $OBJ_FILENAME ] || [ $OBJ_FILENAME -ot $CXX_SRC ]; then
			echo "${CXX} ${CXXFLAGS} -c $CXX_SRC -o $OBJ_FILENAME"
			${CXX} ${CXXFLAGS} -c $CXX_SRC -o $OBJ_FILENAME
		fi
	done

	ar rcs libpolycover.a $POLYCOVER_OBJ_FILES
	LIBS="$LIBS -lc++ -lpolycover"

	popd
fi

# prepare VERSION_NAME name based on repository updates
BASE_VERSION="$(cat VERSION)"
REVISION="$(git rev-list --count HEAD)"
HASH=$(git rev-list HEAD | head -n 1 | cut -c 1-6)
MODIFIED=""
if [[ $(git status --porcelain | grep " M") ]]; then
	  MODIFIED="m"
fi
VERSION_NAME="${BASE_VERSION}r${REVISION}${MODIFIED}_${HASH}_${MODE}_$(echo $EXTRA | paste -d'_' -s -)"
echo ${VERSION_NAME}

# check if version name stored is the same as the one
# we just computed
STORED_VERSION_NAME=""
if [ -f VERSION_NAME ]; then
	STORED_VERSION_NAME=$(cat VERSION_NAME)
fi

VERSION_NAME_WAS_UPDATED=""
if [ "${VERSION_NAME}" != "${STORED_VERSION_NAME}" ]; then
	VERSION_NAME_WAS_UPDATED="yes"
	echo "${VERSION_NAME}" > VERSION_NAME
fi

function f_file_modified {
	DOC_SRC_UPDATED=$(git diff $1 | wc -l)
	if [ "${DOC_SRC_UPDATED}" != "0"]; then
		echo "1"
	fi
}

# Update documentation if its source file has changed.
# Since the output of documentation files are also part
# of the tracked repository, we don't want to updated
# those files everytime we compile, only when there
# is a potential change
function f_update_doc {
        INPUT="$1"
        VER="$2"
        OUTPUT="${INPUT}.doc"

        ${CC} -std=gnu11 -o xdoc xdoc.c
        cat $INPUT | sed 's/__VERSION__/'${VER}'/g' > .docaux
	./xdoc .docaux > $OUTPUT

        echo "updated ${OUTPUT}"
}


DOC_FILES=(app.c app_roadmap.c)
BASE_DIR=$(pwd)
for f in "${DOC_FILES[@]}"; do
	f_update_doc "$f" "${VERSION_NAME}"
done

echo ${BUILD}; \
if ! [ -f ${BUILD} ]; then mkdir -p ${BUILD}; fi ;\
pushd ${BUILD} ;\
# ${C} ${OPTIONS} -fPIC -shared -olibnanocube_app.so ${SRC}/app.c -lm ${APP_EXTRA_LIBS} ;\
${CC} ${CFLAGS} -o ${EXE} ${SRC}/platform_dependent/nix_app.c ${LIBS} ;\
cp ${EXE} ${LOCAL}/bin/. ;\
popd

#
# #!/bin/bash
#
# ARGS=("$@")
#
# # options are "debug", "release", "profile"
# # use PROFILE and nx_PROFILE
# MODE="debug"
# if [ $1 ]; then
# 	MODE=$1
# fi
#
# # extra
# POYCOVER_SUPPPORT=false
#
# # following parameters are the specific defines
# # use PROFILE and nx_PROFILE
# CUSTOM_DEFINES=
# for i in $(seq 2 $#); do
# 	CUSTOM_DEFINES+="-D${ARGS[$i]} ";
# 	if [ "${ARGS[$i]}" == "POLYCOVER" ]; then
# 		POLYCOVER_SUPPORT=true
# 	fi
# done
#
# # FLAGS=-std=c++11 -stdlib=libc++ -O3 -Wall -Werror -Weverything
# FLAGS="-Wall \
# -Werror \
# -std=c11 \
# -Wno-unused-variable \
# -Wno-null-dereference \
# -Wno-unused-function \
# -DOS_MAC"
#
# # -pedantic \
# # -Wno-unused-but-set-variable \
# # -Wno-maybe-uninitialized \
#
# DEBUG_FLAGS="-g -ggdb -DCHECK_ASSERTIONS -fno-omit-frame-pointer"
# RELEASE_FLAGS="-g -ggdb -O3"
# PROFILE_FLAGS="-g -ggdb -O2 -fno-omit-frame-pointer -DPROFILE"
# OPTIONS=""
# # echo "${MODE}"
# if [ "${MODE}" = "debug" ]; then
# 	OPTIONS="${FLAGS} ${DEBUG_FLAGS}"
# elif [ "${MODE}" = "release" ]; then
# 	OPTIONS="${FLAGS} ${RELEASE_FLAGS}"
# elif [ "${MODE}" = "profile" ]; then
# 	OPTIONS="${FLAGS} ${PROFILE_FLAGS}"
# else
# 	echo "invalide mode. needs to be 'debug', 'release', or 'profile'";
# 	exit;
# fi
#
# # -ftime-report
# # -DCHECK_ASSERTIONS
# # -DPROFILE
# # BUG=
# # --enable-checking
# # -Q -v -da
#
# # DEBUG="-g -ggdb -DCHECK_ASSERTIONS -fno-omit-frame-pointer"
# # # -DPROFILE
# # RELEASE="-g -ggdb -O3"
# # # -ftime-report
# # # -DCHECK_ASSERTIONS
# # # -DCHECK_ASSERTIONS
# # # -DPROFILE
# #
# # # -DPROFILE
# # PROFILE="-g -ggdb -O2 -fno-omit-frame-pointer"
# # OPTIONS="${FLAGS} ${DEBUG}"
# # # OPTIONS=${FLAGS} ${RELEASE}
# # # OPTIONS=${FLAGS} ${PROFILE}
# #
#
# BUILD="../../build/nanocube"
# SRC="../../nanocube/src"
# CXX="clang"
# LIBS="-L${BUILD} -lm -ldl -lpthread"
#
# if [ "$POLYCOVER_SUPPORT" = true ]; then
# 	# build polycover
# 	POLYCOVER_SRC=$(cat <(cat <<'EOF'
# polycover/area.cc
# polycover/area.hh
# polycover/boundary.cc
# polycover/boundary.hh
# polycover/cells.cc
# polycover/cells.hh
# polycover/geometry.cc
# polycover/geometry.hh
# polycover/glue.cc
# polycover/infix_iterator.hh
# polycover/labeled_tree.cc
# polycover/labeled_tree.hh
# polycover/maps.cc
# polycover/maps.hh
# polycover/mipmap.cc
# polycover/mipmap.hh
# polycover/polycover.cc
# polycover/polycover.h
# polycover/polycover.hh
# polycover/signal.hh
# polycover/tessellation.cc
# polycover/tessellation.hh
# polycover/tokenizer.cc
# polycover/tokenizer.hh
# polycover/glu/dict.c
# polycover/glu/memalloc.c
# polycover/glu/sweep.c
# polycover/glu/tessmono.c
# polycover/glu/geom.c
# polycover/glu/mesh.c
# polycover/glu/priorityq.c
# polycover/glu/tess.c
# polycover/glu/normal.c
# polycover/glu/render.c
# polycover/glu/tessellate.c
# EOF
# ) | egrep -v "[.](hh|h)$" | paste -d' ' -s)
# 	echo "---------------------"
# 	echo $POLYCOVER_SRC
# 	POLYCOVER_C_SRC=$(echo $POLYCOVER_SRC | tr ' ' '\n' | egrep "[.]c$" | sed 's/^/..\//g' | paste -d' ' -s)
# 	POLYCOVER_CXX_SRC=$(echo $POLYCOVER_SRC | tr ' ' '\n' | egrep "[.]cc$" | sed 's/^/..\//g' | paste -d' ' -s)
# 	echo "---------------------"
# 	echo $POLYCOVER_C_SRC
# 	echo "---------------------"
# 	echo $POLYCOVER_CXX_SRC
# 	# -stdlib=stdlib++
# 	C_FLAGS="-std=gnu11 -fPIC -O2"
# 	CXX_FLAGS="-std=c++11 -fPIC -O2"
# 	# create the C and C++ objects separately
# 	rm -rf .obj
# 	mkdir .obj
# 	pushd .obj
# 	${C} ${C_FLAGS} -c ${POLYCOVER_C_SRC}
# 	${CXX} ${CXX_FLAGS} -c ${POLYCOVER_CXX_SRC}
# 	${CXX} -shared -olibpolycover.so *.o -lm
# 	cp libpolycover.so ${LOCAL}/lib/.
# 	popd
# fi
#
#
# # prepare VERSION_NAME name based on repository updates
# BASE_VERSION="$(cat VERSION)"
# REVISION="$(git rev-list --count HEAD)"
# HASH=$(git rev-list HEAD | head -n 1 | cut -c 1-6)
# MODIFIED=""
# if [[ $(git status --porcelain | grep " M") ]]; then
# 	  MODIFIED="m"
# fi
# VERSION_NAME="${BASE_VERSION}r${REVISION}${MODIFIED}_${HASH}_${MODE}"
# echo ${VERSION_NAME}
#
# # check if version name stored is the same as the one
# # we just computed
# STORED_VERSION_NAME=""
# if [ -f VERSION_NAME ]; then
# 	STORED_VERSION_NAME=$(cat VERSION_NAME)
# fi
#
# VERSION_NAME_WAS_UPDATED=""
# if [ "${VERSION_NAME}" != "${STORED_VERSION_NAME}" ]; then
# 	VERSION_NAME_WAS_UPDATED="yes"
# 	echo "${VERSION_NAME}" > VERSION_NAME
# fi
#
# function f_file_modified {
# 	DOC_SRC_UPDATED=$(git diff $1 | wc -l)
# 	if [ "${DOC_SRC_UPDATED}" != "0"]; then
# 		echo "1"
# 	fi
# }
#
# # Update documentation if its source file has changed.
# # Since the output of documentation files are also part
# # of the tracked repository, we don't want to updated
# # those files everytime we compile, only when there
# # is a potential change
# function f_update_doc {
# 	INPUT="$1"
# 	VER="$2"
# 	OUTPUT="${INPUT}.doc"
#
# 	# find all BEGIN_DOC_STRING lines
# 	grep -n "^BEGIN_DOC_STRING" "${INPUT}" | cut -f 2 -d \ > /tmp/n
# 	grep -n "^BEGIN_DOC_STRING" "${INPUT}" | cut -f 1 -d : > /tmp/b
# 	grep -n "^END_DOC_STRING"   "${INPUT}" | cut -f 1 -d : > /tmp/e
# 	paste /tmp/b /tmp/e /tmp/n > /tmp/r
#
# 	echo "" > "${OUTPUT}"
# 	# read each line as an array
# 	while read -ra LINE; do
# 		FIRST="$((${LINE[0]}+1))"
# 		LAST="$((${LINE[1]}-1))"
# 		NAME="${LINE[2]}"
# 		echo "static const char ${NAME}[] = {" >> "${OUTPUT}"
# 		sed -n ${FIRST},${LAST}p ${INPUT} | sed 's/__VERSION__/'${VER}'/g' > /tmp/i
# 		cat /tmp/i | xxd -i >> ${OUTPUT}
# 		echo ", 0x00 };" >> "${OUTPUT}"
# 	done < /tmp/r
#
# 	echo "updated ${OUTPUT}"
# }
#
# DOC_FILES=(app.c app_roadmap.c)
# BASE_DIR=$(pwd)
# for f in "${DOC_FILES[@]}"; do
# 	f_update_doc "$f" "${VERSION_NAME}"
# done
# # 	if [ -n f_file_modified "$f"] || [-n ${VERSION_NAME_WAS_UPDATED}]; then
# # 	fi
#
# # Compile code
# echo ${BUILD}; \
# if ! [ -f ${BUILD} ]; then mkdir -p ${BUILD}; fi ;\
# pushd ${BUILD} ;\
# ${CXX} ${OPTIONS} -fPIC -shared -olibnanocube_app.so ${SRC}/app.c -lm ;\
# ${CXX} ${OPTIONS} -o nanocube ${SRC}/platform_dependent/nix_app.c ${LIBS} ;\
# cp nanocube ${LOCAL}/bin/. ;\
# cp libnanocube_app.so ${LOCAL}/lib/. ;\
# popd

